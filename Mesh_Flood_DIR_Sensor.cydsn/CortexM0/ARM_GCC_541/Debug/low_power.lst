ARM GAS  C:\Users\run1009\AppData\Local\Temp\ccZuOnWw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"low_power.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HandleLowPowerMode,"ax",%progbits
  20              		.align	2
  21              		.global	HandleLowPowerMode
  22              		.code	16
  23              		.thumb_func
  24              		.type	HandleLowPowerMode, %function
  25              	HandleLowPowerMode:
  26              	.LFB36:
  27              		.file 1 "low_power.c"
   1:low_power.c   **** /*******************************************************************************
   2:low_power.c   **** * File Name: low_power.c
   3:low_power.c   **** *
   4:low_power.c   **** * Version: 1.0
   5:low_power.c   **** *
   6:low_power.c   **** * Description:
   7:low_power.c   **** * This file contains the definiton for funtion to allow low power mode
   8:low_power.c   **** * operation.
   9:low_power.c   **** *
  10:low_power.c   **** ********************************************************************************
  11:low_power.c   **** * Copyright 2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:low_power.c   **** * You may use this file only in accordance with the license, terms, conditions,
  13:low_power.c   **** * disclaimers, and limitations in the end user license agreement accompanying
  14:low_power.c   **** * the software package with which this file was provided.
  15:low_power.c   **** *******************************************************************************/
  16:low_power.c   **** #include <main.h>
  17:low_power.c   **** /*******************************************************************************
  18:low_power.c   **** * Function Name: HandleLowPowerMode
  19:low_power.c   **** ********************************************************************************
  20:low_power.c   **** * Summary:
  21:low_power.c   **** *        This function puts the BLESS in deep sleep mode and CPU to sleep mode 
  22:low_power.c   **** * or deep sleep mode. System will resume from here when it wakes from any interrupt.
  23:low_power.c   **** *
  24:low_power.c   **** * Parameters:
  25:low_power.c   **** *  void
  26:low_power.c   **** *
  27:low_power.c   **** * Return:
  28:low_power.c   **** *  void
  29:low_power.c   **** *
  30:low_power.c   **** *******************************************************************************/
ARM GAS  C:\Users\run1009\AppData\Local\Temp\ccZuOnWw.s 			page 2


  31:low_power.c   **** void HandleLowPowerMode(void)
  32:low_power.c   **** {
  28              		.loc 1 32 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  33:low_power.c   **** 	#ifdef ENABLE_LOW_POWER_MODE
  34:low_power.c   **** 		/* Local variable to store the status of BLESS Hardware block */
  35:low_power.c   **** 		CYBLE_LP_MODE_T sleepMode;
  36:low_power.c   **** 		CYBLE_BLESS_STATE_T blessState;
  37:low_power.c   **** 		
  38:low_power.c   **** 		/* Process Pending BLE Events */
  39:low_power.c   **** 		CyBle_ProcessEvents();
  40:low_power.c   **** 		
  41:low_power.c   **** 		/* Put BLESS into Deep Sleep and check the return status */
  42:low_power.c   **** 		sleepMode = CyBle_EnterLPM(CYBLE_BLESS_DEEPSLEEP);
  43:low_power.c   **** 		
  44:low_power.c   **** 		/* Disable global interrupt to prevent changes from any other interrupt ISR */
  45:low_power.c   **** 		CyGlobalIntDisable;
  46:low_power.c   **** 	
  47:low_power.c   **** 		/* Check the Status of BLESS */
  48:low_power.c   **** 		blessState = CyBle_GetBleSsState();
  49:low_power.c   **** 
  50:low_power.c   **** 		if(sleepMode == CYBLE_BLESS_DEEPSLEEP)
  51:low_power.c   **** 		{
  52:low_power.c   **** 		    /* If the ECO has started or the BLESS can go to Deep Sleep, then place CPU 
  53:low_power.c   **** 			* to Deep Sleep */
  54:low_power.c   **** 			if(blessState == CYBLE_BLESS_STATE_ECO_ON || blessState == CYBLE_BLESS_STATE_DEEPSLEEP)
  55:low_power.c   **** 		    {
  56:low_power.c   **** 				if(shut_down_led)
  57:low_power.c   **** 				{
  58:low_power.c   **** 					/* If PrISM is not acive, put PrISM components to sleep */
  59:low_power.c   **** 					PrISM_1_Sleep();
  60:low_power.c   **** 					PrISM_2_Sleep();
  61:low_power.c   **** 						
  62:low_power.c   **** 					#if (DEBUG_ENABLED == 1)
  63:low_power.c   **** 						/* Put UART component to sleep */
  64:low_power.c   **** 						UART_Sleep();
  65:low_power.c   **** 					#endif
  66:low_power.c   **** 					
  67:low_power.c   **** 			        CySysPmDeepSleep();
  68:low_power.c   **** 					
  69:low_power.c   **** 					#if (DEBUG_ENABLED == 1)
  70:low_power.c   **** 						/* Wakeup UART components after system wakeup */
  71:low_power.c   **** 						UART_Wakeup();
  72:low_power.c   **** 					#endif
  73:low_power.c   **** 					
  74:low_power.c   **** 					/* After system wakes up, wake up the PrISM components */
  75:low_power.c   **** 					PrISM_1_Wakeup();
  76:low_power.c   **** 					PrISM_2_Wakeup();
  77:low_power.c   **** 				}
ARM GAS  C:\Users\run1009\AppData\Local\Temp\ccZuOnWw.s 			page 3


  78:low_power.c   **** 				else
  79:low_power.c   **** 				{
  80:low_power.c   **** 					/* If the system is controlling RGB LED, then PrISM needs to be running. 
  81:low_power.c   **** 					* Put CPU to sleep only */
  82:low_power.c   **** 					#if 0
  83:low_power.c   **** 					CySysClkWriteImoFreq(IMO_FREQUENCY_3MHZ);
  84:low_power.c   **** 					#endif
  85:low_power.c   **** 					CySysPmSleep();
  86:low_power.c   **** 					#if 0
  87:low_power.c   **** 					CySysClkWriteImoFreq(IMO_FREQUENCY_12MHZ);
  88:low_power.c   **** 					#endif
  89:low_power.c   **** 				}
  90:low_power.c   **** 		 	}
  91:low_power.c   **** 		}
  92:low_power.c   **** 		else
  93:low_power.c   **** 		{
  94:low_power.c   **** 		    if(blessState != CYBLE_BLESS_STATE_EVENT_CLOSE)
  95:low_power.c   **** 		    {
  96:low_power.c   **** 				/* If the BLESS hardware block cannot go to Deep Sleep and BLE Event has not 
  97:low_power.c   **** 				* closed yet, then place CPU to Sleep */
  98:low_power.c   **** 		        CySysPmSleep();
  99:low_power.c   **** 		    }
 100:low_power.c   **** 		}
 101:low_power.c   **** 		
 102:low_power.c   **** 		/* Re-enable global interrupt mask after wakeup */
 103:low_power.c   **** 		CyGlobalIntEnable;
 104:low_power.c   **** 		
 105:low_power.c   **** 	#endif
 106:low_power.c   **** }
  38              		.loc 1 106 0
  39 0004 C046     		nop
  40 0006 BD46     		mov	sp, r7
  41              		@ sp needed
  42 0008 80BD     		pop	{r7, pc}
  43              		.cfi_endproc
  44              	.LFE36:
  45              		.size	HandleLowPowerMode, .-HandleLowPowerMode
  46 000a C046     		.text
  47              	.Letext0:
  48              		.section	.debug_info,"",%progbits
  49              	.Ldebug_info0:
  50 0000 9C000000 		.4byte	0x9c
  51 0004 0400     		.2byte	0x4
  52 0006 00000000 		.4byte	.Ldebug_abbrev0
  53 000a 04       		.byte	0x4
  54 000b 01       		.uleb128 0x1
  55 000c FB000000 		.4byte	.LASF14
  56 0010 0C       		.byte	0xc
  57 0011 67000000 		.4byte	.LASF15
  58 0015 9E000000 		.4byte	.LASF16
  59 0019 00000000 		.4byte	.Ldebug_ranges0+0
  60 001d 00000000 		.4byte	0
  61 0021 00000000 		.4byte	.Ldebug_line0
  62 0025 02       		.uleb128 0x2
  63 0026 01       		.byte	0x1
  64 0027 06       		.byte	0x6
  65 0028 86000000 		.4byte	.LASF0
ARM GAS  C:\Users\run1009\AppData\Local\Temp\ccZuOnWw.s 			page 4


  66 002c 02       		.uleb128 0x2
  67 002d 01       		.byte	0x1
  68 002e 08       		.byte	0x8
  69 002f 44000000 		.4byte	.LASF1
  70 0033 02       		.uleb128 0x2
  71 0034 02       		.byte	0x2
  72 0035 05       		.byte	0x5
  73 0036 F1000000 		.4byte	.LASF2
  74 003a 02       		.uleb128 0x2
  75 003b 02       		.byte	0x2
  76 003c 07       		.byte	0x7
  77 003d 73000000 		.4byte	.LASF3
  78 0041 02       		.uleb128 0x2
  79 0042 04       		.byte	0x4
  80 0043 05       		.byte	0x5
  81 0044 57000000 		.4byte	.LASF4
  82 0048 02       		.uleb128 0x2
  83 0049 04       		.byte	0x4
  84 004a 07       		.byte	0x7
  85 004b 1B000000 		.4byte	.LASF5
  86 004f 02       		.uleb128 0x2
  87 0050 08       		.byte	0x8
  88 0051 05       		.byte	0x5
  89 0052 00000000 		.4byte	.LASF6
  90 0056 02       		.uleb128 0x2
  91 0057 08       		.byte	0x8
  92 0058 07       		.byte	0x7
  93 0059 2D000000 		.4byte	.LASF7
  94 005d 03       		.uleb128 0x3
  95 005e 04       		.byte	0x4
  96 005f 05       		.byte	0x5
  97 0060 696E7400 		.ascii	"int\000"
  98 0064 02       		.uleb128 0x2
  99 0065 04       		.byte	0x4
 100 0066 07       		.byte	0x7
 101 0067 0E000000 		.4byte	.LASF8
 102 006b 02       		.uleb128 0x2
 103 006c 04       		.byte	0x4
 104 006d 04       		.byte	0x4
 105 006e EB000000 		.4byte	.LASF9
 106 0072 02       		.uleb128 0x2
 107 0073 08       		.byte	0x8
 108 0074 04       		.byte	0x4
 109 0075 60000000 		.4byte	.LASF10
 110 0079 02       		.uleb128 0x2
 111 007a 01       		.byte	0x1
 112 007b 08       		.byte	0x8
 113 007c 52000000 		.4byte	.LASF11
 114 0080 02       		.uleb128 0x2
 115 0081 08       		.byte	0x8
 116 0082 04       		.byte	0x4
 117 0083 92000000 		.4byte	.LASF12
 118 0087 02       		.uleb128 0x2
 119 0088 04       		.byte	0x4
 120 0089 07       		.byte	0x7
 121 008a 9C010000 		.4byte	.LASF13
 122 008e 04       		.uleb128 0x4
ARM GAS  C:\Users\run1009\AppData\Local\Temp\ccZuOnWw.s 			page 5


 123 008f 89010000 		.4byte	.LASF17
 124 0093 01       		.byte	0x1
 125 0094 1F       		.byte	0x1f
 126 0095 00000000 		.4byte	.LFB36
 127 0099 0A000000 		.4byte	.LFE36-.LFB36
 128 009d 01       		.uleb128 0x1
 129 009e 9C       		.byte	0x9c
 130 009f 00       		.byte	0
 131              		.section	.debug_abbrev,"",%progbits
 132              	.Ldebug_abbrev0:
 133 0000 01       		.uleb128 0x1
 134 0001 11       		.uleb128 0x11
 135 0002 01       		.byte	0x1
 136 0003 25       		.uleb128 0x25
 137 0004 0E       		.uleb128 0xe
 138 0005 13       		.uleb128 0x13
 139 0006 0B       		.uleb128 0xb
 140 0007 03       		.uleb128 0x3
 141 0008 0E       		.uleb128 0xe
 142 0009 1B       		.uleb128 0x1b
 143 000a 0E       		.uleb128 0xe
 144 000b 55       		.uleb128 0x55
 145 000c 17       		.uleb128 0x17
 146 000d 11       		.uleb128 0x11
 147 000e 01       		.uleb128 0x1
 148 000f 10       		.uleb128 0x10
 149 0010 17       		.uleb128 0x17
 150 0011 00       		.byte	0
 151 0012 00       		.byte	0
 152 0013 02       		.uleb128 0x2
 153 0014 24       		.uleb128 0x24
 154 0015 00       		.byte	0
 155 0016 0B       		.uleb128 0xb
 156 0017 0B       		.uleb128 0xb
 157 0018 3E       		.uleb128 0x3e
 158 0019 0B       		.uleb128 0xb
 159 001a 03       		.uleb128 0x3
 160 001b 0E       		.uleb128 0xe
 161 001c 00       		.byte	0
 162 001d 00       		.byte	0
 163 001e 03       		.uleb128 0x3
 164 001f 24       		.uleb128 0x24
 165 0020 00       		.byte	0
 166 0021 0B       		.uleb128 0xb
 167 0022 0B       		.uleb128 0xb
 168 0023 3E       		.uleb128 0x3e
 169 0024 0B       		.uleb128 0xb
 170 0025 03       		.uleb128 0x3
 171 0026 08       		.uleb128 0x8
 172 0027 00       		.byte	0
 173 0028 00       		.byte	0
 174 0029 04       		.uleb128 0x4
 175 002a 2E       		.uleb128 0x2e
 176 002b 00       		.byte	0
 177 002c 3F       		.uleb128 0x3f
 178 002d 19       		.uleb128 0x19
 179 002e 03       		.uleb128 0x3
ARM GAS  C:\Users\run1009\AppData\Local\Temp\ccZuOnWw.s 			page 6


 180 002f 0E       		.uleb128 0xe
 181 0030 3A       		.uleb128 0x3a
 182 0031 0B       		.uleb128 0xb
 183 0032 3B       		.uleb128 0x3b
 184 0033 0B       		.uleb128 0xb
 185 0034 27       		.uleb128 0x27
 186 0035 19       		.uleb128 0x19
 187 0036 11       		.uleb128 0x11
 188 0037 01       		.uleb128 0x1
 189 0038 12       		.uleb128 0x12
 190 0039 06       		.uleb128 0x6
 191 003a 40       		.uleb128 0x40
 192 003b 18       		.uleb128 0x18
 193 003c 9742     		.uleb128 0x2117
 194 003e 19       		.uleb128 0x19
 195 003f 00       		.byte	0
 196 0040 00       		.byte	0
 197 0041 00       		.byte	0
 198              		.section	.debug_aranges,"",%progbits
 199 0000 1C000000 		.4byte	0x1c
 200 0004 0200     		.2byte	0x2
 201 0006 00000000 		.4byte	.Ldebug_info0
 202 000a 04       		.byte	0x4
 203 000b 00       		.byte	0
 204 000c 0000     		.2byte	0
 205 000e 0000     		.2byte	0
 206 0010 00000000 		.4byte	.LFB36
 207 0014 0A000000 		.4byte	.LFE36-.LFB36
 208 0018 00000000 		.4byte	0
 209 001c 00000000 		.4byte	0
 210              		.section	.debug_ranges,"",%progbits
 211              	.Ldebug_ranges0:
 212 0000 00000000 		.4byte	.LFB36
 213 0004 0A000000 		.4byte	.LFE36
 214 0008 00000000 		.4byte	0
 215 000c 00000000 		.4byte	0
 216              		.section	.debug_line,"",%progbits
 217              	.Ldebug_line0:
 218 0000 3B000000 		.section	.debug_str,"MS",%progbits,1
 218      02002200 
 218      00000201 
 218      FB0E0D00 
 218      01010101 
 219              	.LASF6:
 220 0000 6C6F6E67 		.ascii	"long long int\000"
 220      206C6F6E 
 220      6720696E 
 220      7400
 221              	.LASF8:
 222 000e 756E7369 		.ascii	"unsigned int\000"
 222      676E6564 
 222      20696E74 
 222      00
 223              	.LASF5:
 224 001b 6C6F6E67 		.ascii	"long unsigned int\000"
 224      20756E73 
 224      69676E65 
ARM GAS  C:\Users\run1009\AppData\Local\Temp\ccZuOnWw.s 			page 7


 224      6420696E 
 224      7400
 225              	.LASF7:
 226 002d 6C6F6E67 		.ascii	"long long unsigned int\000"
 226      206C6F6E 
 226      6720756E 
 226      7369676E 
 226      65642069 
 227              	.LASF1:
 228 0044 756E7369 		.ascii	"unsigned char\000"
 228      676E6564 
 228      20636861 
 228      7200
 229              	.LASF11:
 230 0052 63686172 		.ascii	"char\000"
 230      00
 231              	.LASF4:
 232 0057 6C6F6E67 		.ascii	"long int\000"
 232      20696E74 
 232      00
 233              	.LASF10:
 234 0060 646F7562 		.ascii	"double\000"
 234      6C6500
 235              	.LASF15:
 236 0067 6C6F775F 		.ascii	"low_power.c\000"
 236      706F7765 
 236      722E6300 
 237              	.LASF3:
 238 0073 73686F72 		.ascii	"short unsigned int\000"
 238      7420756E 
 238      7369676E 
 238      65642069 
 238      6E7400
 239              	.LASF0:
 240 0086 7369676E 		.ascii	"signed char\000"
 240      65642063 
 240      68617200 
 241              	.LASF12:
 242 0092 6C6F6E67 		.ascii	"long double\000"
 242      20646F75 
 242      626C6500 
 243              	.LASF16:
 244 009e 433A5C55 		.ascii	"C:\\Users\\run1009\\Documents\\Mesh_Flood_DIR_Senso"
 244      73657273 
 244      5C72756E 
 244      31303039 
 244      5C446F63 
 245 00cd 725C4D65 		.ascii	"r\\Mesh_Flood_DIR_Sensor.cydsn\000"
 245      73685F46 
 245      6C6F6F64 
 245      5F444952 
 245      5F53656E 
 246              	.LASF9:
 247 00eb 666C6F61 		.ascii	"float\000"
 247      7400
 248              	.LASF2:
 249 00f1 73686F72 		.ascii	"short int\000"
ARM GAS  C:\Users\run1009\AppData\Local\Temp\ccZuOnWw.s 			page 8


 249      7420696E 
 249      7400
 250              	.LASF14:
 251 00fb 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 251      43313120 
 251      352E342E 
 251      31203230 
 251      31363036 
 252 012e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 252      20726576 
 252      6973696F 
 252      6E203233 
 252      37373135 
 253 0161 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 253      66756E63 
 253      74696F6E 
 253      2D736563 
 253      74696F6E 
 254              	.LASF17:
 255 0189 48616E64 		.ascii	"HandleLowPowerMode\000"
 255      6C654C6F 
 255      77506F77 
 255      65724D6F 
 255      646500
 256              	.LASF13:
 257 019c 73697A65 		.ascii	"sizetype\000"
 257      74797065 
 257      00
 258              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
